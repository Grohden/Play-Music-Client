(function (){
    'use strict';

    //Electron
    const {ipcRenderer} = require('electron');

    ipcRenderer.on('ping', () => {
        ipcRenderer.sendToHost('pong')
    });

    //Node
    const fs = require('fs');
    const path = require('path');
    const url = require('url');
    const request = require('request');

    //Generated by NodeRT
    const profile = require('windows.system.userprofile');
    const storage = require('windows.storage');


    /*-----------------------*\
           LOGS Controls
    \*-----------------------*/

    //Make a copy of the old console.
    var oldConsole = Object.assign({}, console);

    //This function redefine the caller with the original one. (well, at least i expect this to work in chrome, not tested in others)
    function setEnabled(bool) {
        if (bool) {
            //Rewrites the disable function with the original one.
            console[this.name] = oldConsole[this.name];
            //Make sure the setEnable will be callable from original one.
            console[this.name].setEnabled = setEnabled;
        } else {
            //Rewrites the original.
            var fn = function () {/*function disabled, to enable call console.fn.setEnabled(true)*/};
            //Defines the name, to remember.
            Object.defineProperty(fn, "name", {value: this.name});
            //replace the original with the empty one.
            console[this.name] = fn;
            //set the enable function
            console[this.name].setEnabled = setEnabled

        }
    }

    var FLAGS = {};
    FLAGS.DEBUG = true;
    FLAGS.INFO = false;
    FLAGS.LOG = false;
    FLAGS.ALL = false;

    function makeThemSwitchable(opt) {
        var keysArr = Object.keys(opt);
        //its better use this type of for.
        for (var x = 0; x < keysArr.length; x++) {
            var key = keysArr[x];
            var lowerKey = key.toLowerCase();
            //Only if the key exists
            if (console[lowerKey]) {
                //define the function
                console[lowerKey].setEnabled = setEnabled;
                //Make it enabled/disabled by key.
                console[lowerKey].setEnabled(opt[key] || opt.ALL);
            }
        }
    }
    //Put the set enabled function on the original console using the defined flags and set them.
    makeThemSwitchable(FLAGS);




    /*-----------------------*\
          Main variables
    \*-----------------------*/
    var lockScreenImageDir = path.join(__dirname, 'lockscreen_img');
    var imageLocation =  null;
    var resolutionDownload = 1000;
    var currentPlayingInformation = {};


    // make sure the directory in which we save the images exist
    if (!fs.existsSync(lockScreenImageDir)) {
        fs.mkdirSync(lockScreenImageDir);
    }

    window.onload = function() {
        init();
    };


    function init() {

        //var MutationObserver = window.MutationObserver;
        var target = document.querySelector('#playerSongInfo');

        var observer = new MutationObserver(function (mutations) {
            console.debug("Detected changes", mutations);
            if(target.children.length) {

                let currentAlbumName = document.getElementsByClassName("player-album")[0].innerText;
                if(currentAlbumName != currentPlayingInformation.albumName){
                    currentPlayingInformation.albumName = currentAlbumName;
                    console.info("Album changed to",currentAlbumName);
                }

                let albumImageUrl = document.getElementById("playerBarArt").src.replace("s90","s"+resolutionDownload); //replace the resolution download.
                if(albumImageUrl != currentPlayingInformation.albumUrl){
                    currentPlayingInformation.albumUrl = albumImageUrl;
                    console.info("Album image url changed");

                    imageLocation = path.join(lockScreenImageDir,currentAlbumName+'.jpg');
                    console.debug("Defining image to download path as ",imageLocation);

                    download(albumImageUrl,imageLocation, function (){
                        setLockScreen(imageLocation);
                    });

                }

                let currentArtistName = document.getElementById("player-artist").innerText;
                if(currentArtistName != currentPlayingInformation.artistName){
                    currentPlayingInformation.artistName = currentArtistName;
                    console.info("Artist changed to ",currentArtistName);
                }

                let currentMusicName = document.getElementById("currently-playing-title").innerText;
                if(currentMusicName != currentPlayingInformation.musicName){
                    currentPlayingInformation.musicName = currentMusicName;
                    console.info("Music changed to",currentMusicName);
                }

                /*
                *  TODO: resolve the situation when the user has a music with different image from album.
                *  Now the program will download a image
                *  with the name of the album, but a single music can have a unique image.
                */
                console.debug("Current informations: ",currentPlayingInformation);

            } else {
                console.error("Error occurred while trying to get information about tracks");
            }

        });

        // Observe any changes in the main player.
        observer.observe(target, {attributes: true, childList: true, characterData: true});

        function download(uri, filename, callback) {
            if(typeof callback != "function") callback = ()=>{};

            console.debug("Starting download from ",uri);
            var st = request(uri).pipe(fs.createWriteStream(filename));

            st.on('close', ()=>{
                console.debug("Download finished, file saved on", filename);
                callback.apply(this,arguments);
            });
            st.on('error', ()=>{
                console.error("Download error");
                callback.apply(this,arguments);
            });

        }


        /**
         * Sets the windows lockscreen to the current image path, using NodeRT modules
         * @param {String} path - path from which image will be retrieved.
         * @param {Function} [cb] - callback for error or success.
         */
        var setLockScreen = function setLockScreen(path, cb) {
            cb = cb || function() {};
            storage.StorageFile.getFileFromPathAsync(path, function(err, file) {
                if (err) {
                    console.error('Error getting image file:', err);
                    cb(err);
                }

                profile.LockScreen.setImageFileAsync(file, function(err) {
                    if (err) {
                        console.error('Error setting lock screen image:', err);
                        return cb(err);
                    }
                    cb();
                });
            });
        };

        function setFlag(type,active){
            if(FLAGS[type] != undefined){
                FLAGS[type] = active;
            } else {
                console.error(type,"not found!");
            }
        }

        function setOldConsole(){
            window.console = oldConsole;
        }

        //Make some tools globals on debug mode.
        if(FLAGS.DEBUG || FLAGS.ALL) {
            window.download = download;
            window.setLog = setFlag;
            window.FLAGS = FLAGS;
            window.setOldConsole = setOldConsole;
        }
        //download("https://lh3.googleusercontent.com/zDkZYFnrtdI13QGiFs6vIWUn9W3DEXcS_w3xuyoIhcVjpgnOMMi6rBazr8V7=s90-c-e100","C:\\");

    }

})();


